####################################################

Code developed by: Andres Florez (Los Andes), Alfredo Gurrola (Vanderbilt) and Amandeep Kalsi (Panjab)

###################################################

The recipe is to install the code at LPC/ACCRE. 
Therefore, to install the code elsewere, you'd need 
to make the necessary changes.

In order to use the code you need to follow carefully these steps:


#####################################################################
#                         CMSSW_8_0_25 Recipe                        #
#####################################################################

1. You need to work at the SLC6 area.

   setenv SCRAM_ARCH slc6_amd64_gcc530
   source /cvmfs/cms.cern.ch/cmsset_default.csh

2. set the CMSSW release: cmsrel CMSSW_8_0_25

3. cd CMSSW_8_0_25/src

4. cmsenv

5. Install and compile the code to use the MET producers (for covariance matrix):

  5.1 git cms-init
  5.2 git cms-addpkg RecoMET/METProducers
  5.3 scram b -j 10
  5.4 git cms-merge-topic -u cms-met:fromCMSSW_8_0_20_postICHEPfilter
  5.5 scram b -j 10

6. Install and compile code to use the latest electron ID
  6.1 git cms-merge-topic Sam-Harper:HEEPV70VID_8010_ReducedCheckout
  6.2 git cms-merge-topic ikrav:egm_id_80X_v3
  6.3 git cms-merge-topic Sam-Harper:PackedCandNoPuppi
  6.4 mkdir -p ../external/slc6_amd64_gcc530/data/RecoEgamma/ElectronIdentification/
  6.5 git clone git@github.com:cms-data/RecoEgamma-ElectronIdentification ../external/slc6_amd64_gcc530/data/RecoEgamma/ElectronIdentification/data
  6.6 scramv1 b -j 10

7. Get the NTupleMaker code and compile it:

  7.1 git clone https://github.com/florez/NtupleMaker_740
  7.2 cd NtupleMaker_740
  7.3 git checkout for_CMSSW_8025 
  7.4 cd ../
  7.5 mv NtupleMaker_740 NtupleMaker
  7.6 scram b -j 10

8. In the python directory, there is file called miniAODv2_8025_*.py (name specifies which file is appropriate)
   8.1 You can run it with CMSSW (make sure it runs on a valid miniOADv2): cmsRun miniAODv2_8025_MC.py

#####################################################################
#                   Splitting signal samples                        #
#####################################################################

To obtain exclusive signal points from offical signal samples one has to first create the ntuples and then use the script python/ModelSplitter.py to slpit the root files in exclusive samples.

To run just do: python ModelSplitter.py

Take care of changing the input files and setting the base path of the output files that will be produced.

The python script will create automatically root files named with the name used in the official production.
